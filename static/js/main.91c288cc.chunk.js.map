{"version":3,"sources":["components/inputbar.js","components/todoitem.js","components/todolist.js","components/tododetails.js","App.js","serviceWorker.js","index.js"],"names":["InputBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todo","time","details","adjustInputDisplay","_this2","react_default","a","createElement","onChange","event","setState","target","value","placeholder","style","display","inputDisplay","className","onClick","hideInputs","addTodo","Component","TodoItem","changeDetailsDisplay","TodoList","todos","map","idx","todoitem","key","TodoDetails","App","inputState","displayInput","inputbar","push","todolist","item","tododetails","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.91c288cc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass InputBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            todo: '',\n            time: '',\n            details: ''\n        }\n\n    }\n\n    hideInputs() {\n        this.props.adjustInputDisplay()\n    }\n\n    render() {\n        return (\n            <div>\n                <input onChange={(event) => { this.setState({ todo: event.target.value }) }} placeholder=\"Todo\" style={{ 'display': this.props.inputDisplay }} />\n                <input onChange={(event) => { this.setState({ time: event.target.value }) }} placeholder=\"Time\" style={{ 'display': this.props.inputDisplay }} />\n                <input onChange={(event) => { this.setState({ details: event.target.value }) }} placeholder=\"Details\" style={{ 'display': this.props.inputDisplay }} />\n                <button className=\"btn btn-success\" onClick={() => {\n                    this.hideInputs();\n                    this.props.addTodo(this.state)\n\n                }} style={{ display: this.props.inputDisplay }} >Insert</button>\n                <button className=\"btn btn-danger\" style={{ display: this.props.inputDisplay }} onClick={() => { this.hideInputs() }}>Cancel</button>\n            </div >\n        )\n    }\n}\n\nexport default InputBar;","import React from 'react';\n\nconst TodoItem = (props) => {\n    return (\n        <li onClick={() => { props.changeDetailsDisplay(props.todo) }}>{props.todo.todo}</li>\n    )\n}\n\nexport default TodoItem;","import React from 'react';\nimport TodoItem from './todoitem';\n\nconst TodoList = (props) => {\n    const todos = props.todos.map((todo, idx) => {\n        return <TodoItem changeDetailsDisplay={props.changeDetailsDisplay} key={idx} todo={todo} />\n    })\n    return (\n        <ul>{todos}</ul>\n    )\n}\n\nexport default TodoList;","import React from 'react';\n\nconst TodoDetails = (props) => {\n    return (\n        <div>\n            <p>{props.display.todo}</p>\n            <p>{props.display.time}</p>\n            <p>{props.display.details}</p>\n        </div>\n    )\n}\n\nexport default TodoDetails;","import React, { Component } from 'react';\nimport InputBar from './components/inputbar';\nimport TodoList from './components/todolist';\nimport TodoDetails from './components/tododetails';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      todos: [\n        {\n          todo: 'Feed the dog',\n          time: '7:43AM',\n          details: 'Feed the dog early this morning before going to work'\n        },\n        {\n          todo: 'Finish the app',\n          time: '8:00AM',\n          details: 'Completely add that functionality you started with yesterday'\n        }\n      ],\n      inputState: 'none',\n      display: {}\n    }\n  }\n\n\n\n  displayInput() {\n    this.setState({ inputState: 'block' });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"jumbotron text-center\">\n          <h4>Todo App</h4>\n          <br />\n          <button className=\"btn btn-primary\" onClick={() => { this.displayInput() }}>Add+</button>\n          <InputBar addTodo={(todo) => { this.state.todos.push(todo) }} inputDisplay={this.state.inputState} adjustInputDisplay={() => { this.setState({ inputState: 'none' }) }} />\n        </div>\n        <div className=\"row\">\n          <div className=\"col-lg-5 col-md-5 col-sm-6 col-xs-6 text-center\">\n            <TodoList todos={this.state.todos} changeDetailsDisplay={(item) => { this.setState({ display: item }) }} />\n          </div>\n          <div className=\"col-lg-7 col-md-7 col-sm-6 col-xs-6\">\n            <TodoDetails display={this.state.display} />\n          </div>\n        </div>\n      </div >\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}